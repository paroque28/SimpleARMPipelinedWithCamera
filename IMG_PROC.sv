
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module IMG_PROC(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// GPIO_0, GPIO_0 connect to D5M - 5M Pixel Camera //////////
	input 		    [11:0]		cameraD5M_D,
	input 		          		cameraD5M_FVAL,
	input 		          		cameraD5M_LVAL,
	input 		          		cameraD5M_PIXCLK,
	output		          		cameraD5M_RESET_N,
	output		          		cameraD5M_SCLK,
	inout 		          		cameraD5M_SDATA,
	input 		          		cameraD5M_STROBE,
	output		          		cameraD5M_TRIGGER,
	output		          		cameraD5M_XCLKIN,

	//////////// GPIO_1, GPIO_1 connect to MTL2 - Multi-Touch LCD Panel //////////
	output		     [7:0]		screenMTL_B,
	output		          		screenMTL_DCLK,
	output		     [7:0]		screenMTL_G,
	output		          		screenMTL_HSD,
	output		     [7:0]		screenMTL_R,
	output		          		screenMTL_VSD
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

//VGA
logic vga_clock, reset;
//VGA-Frame
logic [7:0] fr, fg, fb;
logic [11:0] fx ,fy;

//Camera

 logic	[11:0]	mCCD_DATA;
 logic  mCCD_DVAL;					
 logic [11:0] rCCD_DATA;
 logic rCCD_LVAL, rCCD_FVAL;

 logic	[15:0]	X_Cont;
 logic	[15:0]	Y_Cont;
 logic	[31:0]	Frame_Cont;
	
 logic	[11:0]	sCCD_R;
 logic	[11:0]	sCCD_G;
 logic	[11:0]	sCCD_B;
 logic				sCCD_DVAL;


// Delay

logic				DLY_RST_0;
logic				DLY_RST_1;
logic				DLY_RST_2;
//=======================================================
//  Structural coding
//=======================================================
assign screenMTL_DCLK = vga_clock;



 always_ff @(posedge cameraD5M_PIXCLK)
 begin
 	rCCD_DATA	<=	cameraD5M_D;
 	rCCD_LVAL	<=	cameraD5M_LVAL;
 	rCCD_FVAL	<=	cameraD5M_FVAL;
 end




assign reset_vga = 1'b1;

//=======================================================
// Modules
//=======================================================

//VGA

video u0 (
		.ref_clk_clk        (CLOCK_50),
		.lcd_clk_clk        (vga_clock),
		.video_in_clk_clk   (cameraD5M_XCLKIN)
);
VGA_Controller vga_blue(	//	Host Side
						.iRed(mCCD_DATA[2:0]),
						.iGreen(mCCD_DATA[5:3]),
						.iBlue(mCCD_DATA[8:6]),
						.oX(fx),
						.oY(fy),
						//	VGA Side
						.oVGA_R(screenMTL_R),
						.oVGA_G(screenMTL_G),
						.oVGA_B(screenMTL_B),
						.oVGA_H_SYNC(screenMTL_HSD),
						.oVGA_V_SYNC(screenMTL_VSD),
						//	Control Signal
						.iCLK(vga_clock),
						.iRST_N(reset_vga)
						);
framebuffer frame (
		.reset_n					(reset_vga),
	   .vga_clk					(vga_clock),
	 
		.fb_xpos				(fx),
		.fb_ypos				(fy),
		
		.red						(fr),
		.green					(fg),
		.blue						(fb)
	);
	
	
//Camera
	
	
 CCD_Capture			ccdc	(	
 							.oDATA      (mCCD_DATA),
 							.oDVAL      (mCCD_DVAL),
 							.oX_Cont    (X_Cont),
 							.oY_Cont    (Y_Cont),
 							.oFrame_Cont(Frame_Cont),
 							.iDATA      (rCCD_DATA),
 							.iFVAL      (rCCD_FVAL),
 							.iLVAL      (rCCD_LVAL),
 							.iSTART     (!KEY[3]),
 							.iEND       (!KEY[2]),
 							.iCLK       (cameraD5M_PIXCLK),
 							.iRST       (DLY_RST_2)
 						);

 RAW2RGB				raw2rgb	(	
 						   .iCLK   (cameraD5M_PIXCLK),
 							.iRST   (DLY_RST_1),
 							.iDATA  (mCCD_DATA),
 							.iDVAL  (mCCD_DVAL),
 							.oRed   (sCCD_R),
 							.oGreen (sCCD_G),
 							.oBlue  (sCCD_B),
 							.oDVAL  (sCCD_DVAL),
 							.iX_Cont(X_Cont),
 							.iY_Cont(Y_Cont)
 						);
						
 Reset_Delay			reset_delay	(	
 							.iCLK  (CLOCK_50),
 							.iRST  (KEY[0]),
 							.oRST_0(DLY_RST_0),
 							.oRST_1(DLY_RST_1),
 							.oRST_2(DLY_RST_2)
 						);
						
// I2c Camera

I2C_CCD_Config 		u8	(	//	Host Side
								 .iCLK			  (CLOCK_50),
								 .iRST_N         (DLY_RST_2),
								 .iZOOM_MODE_SW  (SW[8]),
								 .iEXPOSURE_ADJ  (KEY[1]),
								 .iEXPOSURE_DEC_p(SW[0]),
								  //	I2C Side
								 .I2C_SCLK		  (cameraD5M_SCLK),
								 .I2C_SDAT		  (cameraD5M_SDATA)
							   );
								
//RAM


ram_2port	ram_2port_inst (
	.address_a ( SW ),
	.clock_a ( CLOCK_50 ),
	.data_a ( SW ),
	.wren_a ( ~KEY[0] ),
	.q_a ( LEDR),
	);


endmodule
